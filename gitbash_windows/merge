Name
git-merge - Join two or more development histories together

Synopsis
git merge [-n] [--stat] [--no-commit] [--squash]
        [-s <strategy>] [-X <strategy-option>]
        [--[no-]rerere-autoupdate] [-m <msg>] <commit>...
git merge <msg> HEAD <commit>...
Description
Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch. This command is used by git pull to incorporate changes from another repository and can be used by hand to merge changes from one branch into another.

Assume the following history exists and the current branch is "master":

      A---B---C topic
     /
D---E---F---G master
Then "git merge topic" will replay the changes made on the topic branch since it diverged from master (i.e., E) until its current commit (C) on top of master, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.
      A---B---C topic
     /         \
D---E---F---G---H master
The second syntax (<msg> HEAD <commit>...) is supported for historical reasons. Do not use it from the command line or in new scripts. It is the same as git merge -m <msg> <commit>....
Warning: Running git merge with uncommitted changes is discouraged: while possible, it leaves you in a state that is hard to back out of in the case of a conflict.

Options

 
--commit, --no-commit

Perform the merge and commit the result. This option can be used to override --no-commit.
With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.

--ff, --no-ff
Do not generate a merge commit if the merge resolved as a fast-forward, only update the branch pointer. This is the default behavior of git-merge.
With --no-ff Generate a merge commit even if the merge resolved as a fast-forward.

--log, --no-log
In addition to branch names, populate the log message with one-line descriptions from the actual commits that are being merged.
With --no-log do not list one-line descriptions from the actual commits being merged.

--stat, -n, --no-stat
Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.
With -n or --no-stat do not show a diffstat at the end of the merge.

--squash, --no-squash
Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD to cause the next git commit command to create a merge commit. This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).
With --no-squash perform the merge and commit the result. This option can be used to override --squash.

--ff-only
Refuse to merge and exit with a non-zero status unless the current HEAD is already up-to-date or the merge can be resolved as a fast-forward.
-s <strategy>, --strategy=<strategy>
Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (git merge-recursive when merging a single head, git merge-octopus otherwise).
-X <option>, --strategy-option=<option>
Pass merge strategy specific option through to the merge strategy.
--summary, --no-summary
Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.
-q, --quiet
Operate quietly.
-v, --verbose
Be verbose.
-m <msg>
Set the commit message to be used for the merge commit (in case one is created). The git fmt-merge-msg command can be used to give a good default for automated git merge invocations.
--rerere-autoupdate, --no-rerere-autoupdate
Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.
<commit>...
Commits, usually other branch heads, to merge into our branch. You need at least one <commit>. Specifying more than one <commit> obviously means you are trying an Octopus.
Pre-merge Checks
Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be clobbered if there are conflicts. See also git-stash(1). git pull and git merge will stop without doing anything when local uncommitted changes overlap with files that git pull/git merge may need to update.

To avoid recording unrelated changes in the merge commit, git pull and git merge will also abort if there are any changes registered in the index relative to the HEAD commit. (One exception is when the changed index entries are in the state that would result from the merge already.)

If all named commits are already ancestors of HEAD, git merge will exit early with the message "Already up-to-date."

Fast-forward Merge
Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from git pull: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the HEAD (along with the index) is updated to point at the named commit, without creating an extra merge commit.

This behavior can be suppressed with the --no-ff option.

True Merge
Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that has both of them as its parents.

A merged version reconciling the changes from all branches to be merged is committed, and your HEAD, index, and working tree are updated to it. It is possible to have modifications in the working tree as long as they do not overlap; the update will preserve them.

When it is not obvious how to reconcile the changes, the following happens:

1. The HEAD pointer stays the same.
2. The MERGE_HEAD ref is set to point to the other branch head.
3. Paths that merged cleanly are updated both in the index file and in your working tree.
4. For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common ancestor, stage 2 from HEAD, and stage 3 from MERGE_HEAD (you can inspect the stages with git ls-files -u). The working tree files contain the result of the "merge" program; i.e. 3-way merge results with familiar conflict markers <<< === >>>.
5. No other changes are made. In particular, the local modifications you had before you started merge will stay the same and the index entries for them stay as they were, i.e. matching HEAD.
If you tried a merge which resulted in complex conflicts and want to start over, you can recover with git reset --merge.
How Conflicts Are Presented
During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the common ancestor's version, non-overlapping ones (that is, you changed an area of the file while the other side left that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the same area, however, git cannot randomly pick one side over the other, and asks you to resolve it by leaving what both sides did to that area.

By default, git uses the same style as that is used by "merge" program from the RCS suite to present such a conflicted hunk, like this:

Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
The area where a pair of conflicting changes happened is marked with markers <<<<<<<, =======, and >>>>>>>. The part before the ======= is typically your side, and the part afterwards is typically their side.
The default format does not show what the original said in the conflicting area. You cannot tell how many lines are deleted and replaced with Barbie's remark on your side. The only thing you can tell is that your side wants to say it is hard and you'd prefer to go shopping, while the other side wants to claim it is easy.

An alternative style can be used by setting the "merge.conflictstyle" configuration variable to "diff3". In "diff3" style, the above conflict may look like this:

Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
|||||||
Conflict resolution is hard.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
In addition to the <<<<<<<, =======, and >>>>>>> markers, it uses another ||||||| marker that is followed by the original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better resolution by viewing the original.
How To Resolve Conflicts
After seeing a conflict, you can do two things:

â€¢ Decide not to merge. The only clean-ups you need are to reset the index file to the HEAD commit to reverse 2. and to clean up working tree changes made by 2. and 3.; git-reset --hard can be used for this.
â€¢ Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and git add them to the index. Use git commit to seal the deal.
You can work through the conflict with a number of tools:
â€¢ Use a mergetool. git mergetool to launch a graphical mergetool which will work you through the merge.
â€¢ Look at the diffs. git diff will show a three-way diff, highlighting changes from both the HEAD and MERGE_HEAD versions.
â€¢ Look at the diffs from each branch. git log --merge -p <path> will show diffs first for the HEAD version and then the MERGE_HEAD version.
â€¢ Look at the originals. git show :1:filename shows the common ancestor, git show :2:filename shows the HEAD version, and git show :3:filename shows the MERGE_HEAD version.
Examples
â€¢ Merge branches fixes and enhancements on top of the current branch, making an octopus merge:

$ git merge fixes enhancements
â€¢ Merge branch obsolete into the current branch, using ours merge strategy:
$ git merge -s ours obsolete
â€¢ Merge branch maint into the current branch, but do not make a new commit automatically:
$ git merge --no-commit maint
This can be used when you want to include further changes to the merge, or want to write your own merge commit message.
You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like bumping release/version name would be acceptable.

Merge Strategies
The merge mechanism (git-merge and git-pull commands) allows the backend merge strategies to be chosen with -s option. Some strategies can also take their own options, which can be passed by giving -X<option> arguments to git-merge and/or git-pull.

resolve

This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.
recursive
This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mis-merges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.
The recursive strategy can take the following options:

ours

This option forces conflicting hunks to be auto-resolved cleanly by favoring our version. Changes from the other tree that do not conflict with our side are reflected to the merge result.
This should not be confused with the ours merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring our history contains all that happened in it.

theirs
This is opposite of ours.
subtree[=path]
This option is a more advanced form of subtree strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.
octopus
This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.
ours
This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the recursive merge strategy.
subtree
This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.
Configuration
merge.conflictstyle

Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is "merge", which shows a <<<<<<< conflict marker, changes made by one side, a ======= marker, changes made by the other side, and then a >>>>>>> marker. An alternate style, "diff3", adds a ||||||| marker and the original text before the ======= marker.
merge.log
Whether to include summaries of merged commits in newly created merge commit messages. False by default.
merge.renameLimit
The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit.
merge.stat
Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default.
merge.tool
Controls which merge resolution program is used by git-mergetool(1). Valid built-in values are: "kdiff3", "tkdiff", "meld", "xxdiff", "emerge", "vimdiff", "gvimdiff", "diffuse", "ecmerge", "tortoisemerge", "p4merge", "araxis" and "opendiff". Any other value is treated is custom merge tool and there must be a corresponding mergetool.<tool>.cmd option.
merge.verbosity
Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the GIT_MERGE_VERBOSITY environment variable.
merge.<driver>.name
Defines a human-readable name for a custom low-level merge driver. See gitattributes(5) for details.
merge.<driver>.driver
Defines the command that implements a custom low-level merge driver. See gitattributes(5) for details.
merge.<driver>.recursive
Names a low-level merge driver to be used when performing an internal merge between common ancestors. See gitattributes(5) for details.
branch.<name>.mergeoptions
Sets default options for merging into branch <name>. The syntax and supported options are the same as those of git merge, but option values containing whitespace characters are currently not supported.



****************************************************************



Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ cat a1
444
444444
sdfsdf
sdsfsdfsd
sdsfsdf

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ cat>>a1
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ cat a1
444
444444
sdfsdf
sdsfsdfsd
sdsfsdf
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git add .
warning: LF will be replaced by CRLF in a1.
The file will have its original line endings in your working directory

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git commit a1
warning: LF will be replaced by CRLF in a1.
The file will have its original line endings in your working directory
Aborting commit due to empty commit message.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   a1


Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git commit a1 "dsf"
error: pathspec 'dsf' did not match any file(s) known to git

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git commit a1 -m "dsf"
warning: LF will be replaced by CRLF in a1.
The file will have its original line endings in your working directory
[master 14624c0] dsf
 1 file changed, 6 insertions(+)

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git push origin master
To https://github.com/rajadevops26/test.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/rajadevops26/test.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git pull origin master
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/rajadevops26/test
 * branch            master     -> FETCH_HEAD
   11172e7..4ef4a72  master     -> origin/master
Auto-merging a1
CONFLICT (content): Merge conflict in a1
Automatic merge failed; fix conflicts and then commit the result.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ cat a1
<<<<<<< HEAD
444
444444
sdfsdf
sdsfsdfsd
sdsfsdf
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull
=======
git hub written
files are deleted
new lines are added
>>>>>>> 4ef4a72f4dc2a7aac990268f80d84adc31da514e

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ vi a1

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git status
On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   a1

no changes added to commit (use "git add" and/or "git commit -a")

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git add
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git add .

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git commit
[master bab20db] Merge branch 'master' of https://github.com/rajadevops26/test

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git pull origin master
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/rajadevops26/test
 * branch            master     -> FETCH_HEAD
   4ef4a72..7596d56  master     -> origin/master
Auto-merging a1
CONFLICT (content): Merge conflict in a1
Automatic merge failed; fix conflicts and then commit the result.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git merge fixes enhancements
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$  git merge -s ours obsolete
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git merge --no-commit maint
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ cat a1
<<<<<<< HEAD
44
444444
sdfsdf
sdsfsdfsd
sdsfsdf
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull
=======
git hub written
files are deleted
new lines are added

=======

git hub written
files are deleted
new lines are added
check the merge
>>>>>>> 7596d5670731508987477aff5052018c11b1d981

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git add .

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ cat a1
<<<<<<< HEAD
44
444444
sdfsdf
sdsfsdfsd
sdsfsdf
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull
=======
git hub written
files are deleted
new lines are added

=======

git hub written
files are deleted
new lines are added
check the merge
>>>>>>> 7596d5670731508987477aff5052018c11b1d981

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master|MERGING)
$ git commit
[master 82cac60] Merge branch 'master' of https://github.com/rajadevops26/test

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ cat a1
<<<<<<< HEAD
44
444444
sdfsdf
sdsfsdfsd
sdsfsdf
first edited in gitbash
add and commit
not pused
after goto github
add and commit
check push and pull
=======
git hub written
files are deleted
new lines are added

=======

git hub written
files are deleted
new lines are added
check the merge
>>>>>>> 7596d5670731508987477aff5052018c11b1d981

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git merge fixes enhancements
merge: fixes - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$  git merge -s ours obsolete
merge: obsolete - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git merge --no-commit maint
merge: maint - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (master)
$ git checkout raja
Switched to branch 'raja'

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$ ls
a1  a2  b1  README.md

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$ git merge --no-commit maint master
merge: maint - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$ ls
a1  a2  b1  README.md

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$  git merge -s ours obsolete master
merge: obsolete - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$ git merge fixes enhancements master
merge: fixes - not something we can merge

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$ ls
a1  a2  b1  README.md

Rajamanoheryogi@RamullakotaRajendra MINGW64 ~/k8s/test (raja)
$
